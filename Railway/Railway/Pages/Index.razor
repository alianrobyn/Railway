@page "/"
@using Microsoft.EntityFrameworkCore;
@using Railway.Data;
@using Railway.Models;
@inject NavigationManager NavManager
@inject AppDbContext DbContext


<PageTitle>Index</PageTitle>

<MudText Align="Align.Center" Color="Color.Tertiary" Typo="Typo.h4">Головна</MudText>
<br />
<br />

<MudStack Row="true">
    <MudTextField @bind-Value="@element.From" Label="Звідки"  Variant="Variant.Outlined" Margin="Margin.Dense" />
    <MudIconButton Icon="@Icons.Material.Filled.SyncAlt" Color="Color.Inherit" Edge="Edge.Start" OnClick="SwapValues" />
    <MudTextField @bind-Value="@element.Where" Label="Куди" Variant="Variant.Outlined" Margin="Margin.Dense" />
</MudStack>
<br />
@*<MudItem xs="3">
	<MudTextField @bind-Value="@element.Data" Format="yyyy-MM-dd" Label="Дата відправлення" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="InputType.Date" />
</MudItem>*@
<br />

<div class="d-flex align-end justify-space-between mud-width-full">
	<div class="d-flex flex-column">
        <MudText><b>Звідки:</b> @element.From</MudText>
        <MudText><b>Куди:</b> @element.Where</MudText>
@*		<MudText><b>Дата відправлення:</b> @element.Data.ToShortDateString()</MudText>
*@	</div>
</div>

<br />

	<MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@l" Color="Color.Tertiary">Логін</MudButton>
@* 	<MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@i" Color="Color.Tertiary">Квитки</MudButton>
	<MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@a" Color="Color.Tertiary">Адмін</MudButton>
 *@
<MudTable FixedHeader="@fixed_header" Filter="new Func<Route,bool>(FilterFunc)" Items="GetRoute" Hover="true" Elevation="0" @bind-SelectedItem="selectedItem1">
    <HeaderContent>
        <MudTh>№ потяга</MudTh>
        <MudTh>Відправлення</MudTh>
        <MudTh> </MudTh>
        <MudTh>Прибуття</MudTh>
        <MudTh> </MudTh>
        <MudTh>Тип потяга</MudTh>
        <MudTh>Вільних місць</MudTh>
        <MudTh>Дата фіксації</MudTh>
        <MudTh>Ціна</MudTh>
        <MudTh> </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="№ потяга">@context.RouteID</MudTd>
        <MudTd DataLabel="Відправлення">@context.DepartureStation</MudTd>
        <MudTd DataLabel="Час"> @Convert.ToDateTime(@context.DepartureDateTime)</MudTd>
        <MudTd DataLabel="Прибуття">@context.ArrivalStation</MudTd>
        <MudTd DataLabel="Час"> @Convert.ToDateTime(@context.ArrivalDateTime)</MudTd>
        <MudTd DataLabel="Тип потяга">@context.Train_Type</MudTd>
        <MudTd DataLabel="Вільних місць">@context.AvailableSeats</MudTd>
        <MudTd DataLabel="Дата фіксації">@context.FixationDateTime</MudTd>
        <MudTd DataLabel="Ціна">@context.Price</MudTd>
        <MudTd DataLabel="Дії">
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Small" Color="Color.Inherit" OnClick="i" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>На Ваш запит не було знайдено жодного маршруту.</MudText>
        <MudText>Переконайтеся, що всі слова написані правильно.</MudText>
        <MudText>Якщо помилок не було виявлено - по заданому Вами напрямку місць немає, але ви можете переглянути маршрути з пересадкою.</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Завантаження...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 20}" />
    </PagerContent>
</MudTable>

<br />

<MudStack AlignItems="AlignItems.Center">
    <MudStack Row="true">
        <MudLink Href="" Color="Color.Tertiary" Underline="Underline.Always">UA</MudLink>
        <MudLink Color="Color.Tertiary" Underline="Underline.Always">|</MudLink>
        <MudLink Href="ru" Color="Color.Tertiary" Underline="Underline.Always">RU</MudLink>
    </MudStack>
</MudStack>


@code {
    private void SwapValues()
    {
        string? temp = element.From;
        element.From = element.Where;
        element.Where = temp;
    }
    
    Search element = new Search { From = "", Where = "", /*Data = DateTime.Today */};

    public class Search
    {
        public string? From { get; set; }
        public string? Where { get; set; }
        //public DateTime Data { get; set; }
    }

    bool fixed_header = true;

    List<Route> GetRoute = new List<Route>();
    protected override async Task OnInitializedAsync()
    {
        GetRoute = await DbContext.Routes.ToListAsync();
    }

    bool FilterFunc(Route route)
    {
        if (element == null || route == null)
        {
            return false; // Handle null cases
        }

        if (string.IsNullOrWhiteSpace(element.From) && string.IsNullOrWhiteSpace(element.Where))
        {
            return true; // Return true if both filters are empty.
        }

        if (string.IsNullOrWhiteSpace(element.From))
        {
            return string.Equals(route.ArrivalStation, element.Where, StringComparison.OrdinalIgnoreCase);
        }

        if (string.IsNullOrWhiteSpace(element.Where))
        {
            return string.Equals(route.DepartureStation, element.From, StringComparison.OrdinalIgnoreCase);
        }

        return string.Equals(route.DepartureStation, element.From, StringComparison.OrdinalIgnoreCase) &&
               string.Equals(route.ArrivalStation, element.Where, StringComparison.OrdinalIgnoreCase);

    }

    private Route selectedItem1;
    private HashSet<Route> selectedItems = new HashSet<Route>();

    void l()
    {
        NavManager.NavigateTo("/login");
    }

    void i()
    {
        NavManager.NavigateTo("issuing_tickets");
    }
    
    void a()
    {
        NavManager.NavigateTo("login_adm");
    }
}