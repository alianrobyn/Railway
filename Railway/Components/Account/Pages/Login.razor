@page "/Account/Login"
@page "/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Railway.Data.Models

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Вхід</PageTitle>

<MudText Align="Align.Center" Color="Color.Tertiary" Typo="Typo.h4">Сторінка авторизації</MudText>

<MudStack AlignItems="AlignItems.Center">
    <StatusMessage Message="@_errorMessage" Severity="Severity.Error"/>
    <EditForm Model="Input" method="post" OnValidSubmit="@(async () => await LoginUser())" FormName="login">
        <DataAnnotationsValidator/>
        <MudItem md="12">
            <MudItem md="12">
                <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                    Label="Email" InputType="InputType.Email" Placeholder="name@example.com"
                                    HelperText="user@domain.com" Variant="Variant.Outlined" Margin="Margin.Dense"
                                    UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "username" }, { "aria-required", "true" } })"/>
            </MudItem>
            <MudItem md="12">
                <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                    Variant="Variant.Outlined"
                                    Label="Пароль" InputType="InputType.Password" Placeholder="password"
                                    UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "current-password" }, { "aria-required", "true" } })"/>
            </MudItem>
            <MudItem md="12">
                <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Запам'ятати мене
                </MudStaticCheckBox>
            </MudItem>
            <MudItem md="12">
                <MudStaticButton Variant="Variant.Filled" Color="Color.Tertiary" FormAction="FormAction.Submit"
                                 FullWidth="true">Увійти
                </MudStaticButton>
            </MudItem>
        </MudItem>
    </EditForm>

    <MudLink
        Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
        Зареєструватися
    </MudLink>
</MudStack>

@code {

    private string? _errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Користувач успішно увійшов.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            _errorMessage = "Помилка: Невдала спроба увійти.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Запам'ятати мене")] public bool RememberMe { get; set; }
    }

}
