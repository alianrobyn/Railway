@using Microsoft.EntityFrameworkCore
@using Railway.Components.AdminComponents.Dialogs
@using Railway.Data
@using Railway.Data.Models
@inject AppDbContext DbContext
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudStack Row="true">
    <MudTextField @bind-Value="_searchString" Placeholder="Пошук" Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                  Class="mt-0" TextChanged="GetRoutes"/>
    <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@NewRoute" Color="Color.Tertiary">
        Новий рейс
    </MudButton>
</MudStack>

<MudTable FixedHeader="true" Items="_routeList" CanCancelEdit="true" Hover="true" Elevation="0"
          @bind-SelectedItem="_selectedRoute" RowEditPreview="route => BackupRouteEntity(route as Route)"
          RowEditCommit="route => _ = SaveRouteData(route as Route)"
          RowEditCancel="route => RestoreRouteData(route as Route)">
    <HeaderContent>
        <MudTh>№ потяга</MudTh>
        <MudTh>Відправлення</MudTh>
        <MudTh></MudTh>
        <MudTh>Прибуття</MudTh>
        <MudTh></MudTh>
        <MudTh>Тип потяга</MudTh>
        <MudTh>Вільних місць</MudTh>
        <MudTh>Дата фіксації</MudTh>
        <MudTh>Ціна</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="№ потяга">@context.RouteId</MudTd>
        <MudTd DataLabel="Відправлення">@context.StartStation.Name</MudTd>
        <MudTd DataLabel="Час"> @Convert.ToDateTime(context.DepartureDateTime)</MudTd>
        <MudTd DataLabel="Прибуття">@context.EndStation.Name</MudTd>
        <MudTd DataLabel="Час"> @Convert.ToDateTime(context.ArrivalDateTime)</MudTd>
        <MudTd DataLabel="Тип потяга">@context.TrainType.Name</MudTd>
        <MudTd DataLabel="Вільних місць">@context.AvailableSeats</MudTd>
        <MudTd DataLabel="Дата фіксації">@context.FixationDateTime</MudTd>
        <MudTd DataLabel="Ціна">@context.Price</MudTd>
        <MudTd DataLabel="Дії">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Inherit"
                           OnClick="() => DeleteRoute(context)"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>На Ваш запит не було знайдено жодного маршруту.</MudText>
        <MudText>Переконайтеся, що всі слова написані правильно.</MudText>
        <MudText>Якщо помилок не було виявлено - по заданому Вами напрямку місць немає, але ви можете
            переглянути маршрути з пересадкою.
        </MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Завантаження...</MudText>
    </LoadingContent>
    <RowEditingTemplate>
        <MudTd DataLabel="№ потяга">@context.RouteId</MudTd>
        <MudTd DataLabel="Відправлення">
            <MudSelect T="Station" @bind-Value="@context.StartStation" Label="Станція відправлення" Required>
                @foreach (var station in Stations)
                {
                    <MudSelectItem Value="station">@station.Name</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel=" ">
            <MudTextField @bind-Value="@context.DepartureDateTime" Format="s"
                          InputType="InputType.DateTimeLocal" Required/>
        </MudTd>
        <MudTd DataLabel="Прибуття">
            <MudSelect T="Station" @bind-Value="@context.EndStation" Label="Станція прибуття" Required>
                @foreach (var station in Stations)
                {
                    <MudSelectItem Value="station">@station.Name</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel=" ">
            <MudTextField @bind-Value="@context.ArrivalDateTime" Format="s"
                          InputType="InputType.DateTimeLocal" Required/>
        </MudTd>
        <MudTd DataLabel="Тип потяга">
            <MudSelect T="TrainType" @bind-Value="@context.TrainType" Label="Тип потяга" Required>
                @foreach (var type in TrainTypes)
                {
                    <MudSelectItem Value="type">@type.Name</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Вільних місць">
            <MudNumericField @bind-Value="@context.AvailableSeats" Label="Вільних місць" Required Min="1"/>
        </MudTd>
        <MudTd DataLabel="Дата фіксації">@context.FixationDateTime</MudTd>
        <MudTd DataLabel="Ціна">
            <MudNumericField @bind-Value="@context.Price" Label="Ціна" Required Min="1" Format="F2"/>
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new[]{10, 20}"/>
    </PagerContent>
</MudTable>

@code {

    private IEnumerable<Route> _routeList = [];
    private IEnumerable<Station> Stations { get; set; } = [];
    private IEnumerable<TrainType> TrainTypes { get; set; } = [];

    private string _searchString = "";
    private Route? _selectedRoute;
    private Route? _selectedRouteBackup;

    protected override Task OnInitializedAsync()
    {
        Stations = DbContext.Stations.ToList();
        TrainTypes = DbContext.TrainTypes.ToList();
        GetRoutes();
        return Task.CompletedTask;
    }

    private async Task DeleteRoute(Route? route)
    {
        var result = await DialogService.ShowMessageBox(
            "Підтвердження видалення",
            "Ви впевнені, що хочете видалити цей маршрут?",
            "Видалити",
            "Скасувати") ?? false;

        if (result)
        {
            DbContext.Remove(route);
            DbContext.Routes.Remove(route);
            await DbContext.SaveChangesAsync();
            GetRoutes();
            Snackbar.Add("Зміни збережено", Severity.Success);
        }
    }

    private async Task SaveRouteData(Route? route)
    {
        if (route == null) return;
        route.FixationDateTime = DateTime.Now;
        DbContext.Routes.Update(route);
        await DbContext.SaveChangesAsync();
        _selectedRouteBackup = null;
        Snackbar.Add("Зміни збережено", Severity.Success);
    }

    private void BackupRouteEntity(Route? route)
    {
        if (route == null) return;
        _selectedRouteBackup = new Route
        {
            RouteId = route.RouteId,
            StartStationId = route.StartStationId,
            EndStationId = route.EndStationId,
            DepartureDateTime = route.DepartureDateTime,
            ArrivalDateTime = route.ArrivalDateTime,
            AvailableSeats = route.AvailableSeats,
            FixationDateTime = route.FixationDateTime,
            Price = route.Price,
            TrainTypeId = route.TrainTypeId
        };
    }

    private void RestoreRouteData(Route? route)
    {
        if (route == null || _selectedRouteBackup == null) return;
        route.StartStationId = _selectedRouteBackup.StartStationId;
        route.EndStationId = _selectedRouteBackup.EndStationId;
        route.DepartureDateTime = _selectedRouteBackup.DepartureDateTime;
        route.ArrivalDateTime = _selectedRouteBackup.ArrivalDateTime;
        route.AvailableSeats = _selectedRouteBackup.AvailableSeats;
        route.FixationDateTime = _selectedRouteBackup.FixationDateTime;
        route.Price = _selectedRouteBackup.Price;
        route.TrainTypeId = _selectedRouteBackup.TrainTypeId;
        _selectedRouteBackup = null;
    }

    private void GetRoutes()
    {
        var baseQuery = DbContext.Routes
            .Include(r => r.StartStation)
            .Include(r => r.EndStation)
            .Include(r => r.TrainType);
        if (!string.IsNullOrWhiteSpace(_searchString))
        {
            _routeList = baseQuery.Where(route => EF.Functions.Like(route.EndStation.Name, $"%{_searchString}%")
                                                  || EF.Functions.Like(route.StartStation.Name, $"%{_searchString}%"))
                .ToList();
        }
        else
        {
            _routeList = baseQuery.ToList();
        }

        StateHasChanged();
    }

    private async Task NewRoute()
    {
        var dialog = await (await DialogService.ShowAsync<CreateRouteDialog>("Новий рейс")).Result;
        if (dialog?.Canceled ?? true) return;

        var newRoute = (Route?)dialog.Data;
        if (newRoute == null) return;

        DbContext.Routes.Add(newRoute);
        await DbContext.SaveChangesAsync();

        GetRoutes();
        _selectedRoute = newRoute;
        Snackbar.Add("Рейс додано", Severity.Success);
    }

}