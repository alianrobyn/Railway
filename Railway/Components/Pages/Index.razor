@page "/"
@using Microsoft.EntityFrameworkCore
@using Railway.Data
@using Railway.Data.Models
@inject NavigationManager NavManager
@inject AppDbContext DbContext


<PageTitle>Index</PageTitle>

<MudText Align="Align.Center" Color="Color.Tertiary" Typo="Typo.h4">Головна</MudText>
<br/>
<br/>

<MudStack Row="true">
    <MudTextField @bind-Value="@_element.From" Label="Звідки" Variant="Variant.Outlined" Margin="Margin.Dense"/>
    <MudIconButton Icon="@Icons.Material.Filled.SyncAlt" Color="Color.Inherit" Edge="Edge.Start" OnClick="SwapValues"/>
    <MudTextField @bind-Value="@_element.Where" Label="Куди" Variant="Variant.Outlined" Margin="Margin.Dense"/>
</MudStack>
<br/>
@*<MudItem xs="3">
	<MudTextField @bind-Value="@element.Data" Format="yyyy-MM-dd" Label="Дата відправлення" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="InputType.Date" />
</MudItem>*@
<br/>

<div class="d-flex align-end justify-space-between mud-width-full">
    <div class="d-flex flex-column">
        <MudText><b>Звідки:</b> @_element.From</MudText>
        <MudText><b>Куди:</b> @_element.Where</MudText>
        @*		<MudText><b>Дата відправлення:</b> @element.Data.ToShortDateString()</MudText>
*@    </div>
</div>

<br/>
<MudTable FixedHeader="@_fixedHeader" Filter="new Func<Route,bool>(FilterRoutes)" Items="_getRoute" Hover="true"
          Elevation="0">
    <HeaderContent>
        <MudTh>№ потяга</MudTh>
        <MudTh>Відправлення</MudTh>
        <MudTh></MudTh>
        <MudTh>Прибуття</MudTh>
        <MudTh></MudTh>
        <MudTh>Тип потяга</MudTh>
        <MudTh>Вільних місць</MudTh>
        <MudTh>Дата фіксації</MudTh>
        <MudTh>Ціна</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="№ потяга">@context.RouteId</MudTd>
        <MudTd DataLabel="Відправлення">@context.StartStation.Name</MudTd>
        <MudTd DataLabel="Час"> @context.DepartureDateTime</MudTd>
        <MudTd DataLabel="Прибуття">@context.EndStation.Name</MudTd>
        <MudTd DataLabel="Час"> @context.ArrivalDateTime</MudTd>
        <MudTd DataLabel="Тип потяга">@context.TrainType.Name</MudTd>
        <MudTd DataLabel="Вільних місць">@context.AvailableSeats</MudTd>
        <MudTd DataLabel="Дата фіксації">@context.FixationDateTime</MudTd>
        <MudTd DataLabel="Ціна">@context.Price</MudTd>
        <MudTd DataLabel="Дії">
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Small" Color="Color.Inherit"
                           OnClick="@(() => GoToIssuingTickets(context.RouteId))"/>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>На Ваш запит не було знайдено жодного маршруту.</MudText>
        <MudText>Переконайтеся, що всі слова написані правильно.</MudText>
        <MudText>Якщо помилок не було виявлено - по заданому Вами напрямку місць немає, але ви можете переглянути
            маршрути з пересадкою.
        </MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Завантаження...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new[]{10, 20}"/>
    </PagerContent>
</MudTable>

<br/>

<MudStack AlignItems="AlignItems.Center">
    <MudStack Row="true">
        <MudLink Href="" Color="Color.Tertiary" Underline="Underline.Always">UA</MudLink>
        <MudLink Color="Color.Tertiary" Underline="Underline.Always">|</MudLink>
        <MudLink Href="ru" Color="Color.Tertiary" Underline="Underline.Always">RU</MudLink>
    </MudStack>
</MudStack>


@code {
    private void SwapValues()
    {
        (_element.From, _element.Where) = (_element.Where, _element.From);
    }

    readonly Search _element = new() { From = "", Where = "" /*Data = DateTime.Today */ };

    public class Search
    {
        public string? From { get; set; }

        public string? Where { get; set; }
        //public DateTime Data { get; set; }
    }

    readonly bool _fixedHeader = true;

    List<Route> _getRoute = [];

    protected override void OnInitialized()
    {
        _getRoute = DbContext.Routes
            .Include(r => r.StartStation)
            .Include(r => r.EndStation)
            .Include(r => r.TrainType)
            .ToList();
    }

    bool FilterRoutes(Route route)
    {
        if (_element == null || route == null)
        {
            return false; // Handle null cases
        }

        if (string.IsNullOrWhiteSpace(_element.From) && string.IsNullOrWhiteSpace(_element.Where))
        {
            return true; // Return true if both filters are empty.
        }

        if (string.IsNullOrWhiteSpace(_element.From) && !string.IsNullOrWhiteSpace(_element.Where))
        {
            return route.EndStation.Name.Contains(_element.Where, StringComparison.OrdinalIgnoreCase);
        }

        if (string.IsNullOrWhiteSpace(_element.Where) && !string.IsNullOrWhiteSpace(_element.From))
        {
            return route.StartStation.Name.Contains(_element.From, StringComparison.OrdinalIgnoreCase);
        }

        return route.StartStation.Name.Contains(_element.From, StringComparison.OrdinalIgnoreCase) &&
               route.EndStation.Name.Contains(_element.Where, StringComparison.OrdinalIgnoreCase);
    }

    void GoToIssuingTickets(int routeId)
    {
        NavManager.NavigateTo($"issuing_tickets/{routeId}");
    }

}